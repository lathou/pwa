{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","react_default","a","createElement","className","src","logo","alt","href","target","rel","PUBLIC_URL","isLocalhost","Boolean","window","location","hostname","match","imgPath","displayNotification","message","registration","Notification","permission","console","log","showNotification","body","icon","vibrate","tag","actions","action","title","registerValidSW","swUrl","config","navigator","serviceWorker","addEventListener","event","data","skipWaiting","reload","e","notification","primaryKey","close","register","then","setTimeout","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","requestPermission","status","URL","origin","concat","fetch","response","contentType","headers","get","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kNCyBzBC,MArBf,WACE,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCN,EAAAC,EAAAC,cAAA,iBACOF,EAAAC,EAAAC,cAAA,0BADP,uBAGAF,EAAAC,EAAAC,cAAA,KACEC,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,kBCAFC,EAAa,qCAEbC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAuCN,IAAMC,EAAU,kBAEhB,SAASC,EAAoBC,EAASC,GACL,WAA3BC,aAAaC,aACfC,QAAQC,IAAI,oCACZJ,EAAaK,iBAAiB,qBAAsB,CAChDC,KAAQP,EACRQ,KAAQV,EACRW,QAAW,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC1CC,IAAO,UACPC,QAAW,CACT,CAAEC,OAAU,MAAOC,MAAS,MAAOL,KAAQV,GAC3C,CAAEc,OAAU,KAAMC,MAAS,KAAML,KAAQV,OAMnD,SAASgB,EAAgBC,EAAOC,GAC9BC,UAAUC,cAAcC,iBAAiB,UAAW,SAAAC,GAG/B,gBAAfA,EAAMC,OACRjB,QAAQC,IAAI,eAGZY,UAAUC,cAAcI,cACxB5B,OAAOC,SAAS4B,YAIpBN,UAAUC,cAAcC,iBAAiB,oBAAqB,SAASK,GACrE,IAAIC,EAAeD,EAAEC,aAEjBb,GADaa,EAAaJ,KAAKK,WACtBF,EAAEZ,QACfR,QAAQC,IAAIO,GAGVa,EAAaE,UAMjBV,UAAUC,cACPU,SAASb,GACTc,KAAK,SAAA5B,GAEJ6B,WAAW,WACT/B,EAAoB,QAASE,IAC5B,KAEHA,EAAa8B,cAAgB,WAC3B,IAAMC,EAAmB/B,EAAagC,WACd,MAApBD,IAIJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACflB,UAAUC,cAAckB,YAI1BhC,QAAQC,IACN,iHAIFN,EAAoB,0FAA6EE,GAG7Fe,GAAUA,EAAOqB,UACnBrB,EAAOqB,SAASpC,KAMlBG,QAAQC,IAAI,sCAGRW,GAAUA,EAAOsB,WACnBtB,EAAOsB,UAAUrC,UAO5BsC,MAAM,SAAAC,GACLpC,QAAQoC,MAAM,4CAA6CA,KChJjEC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAASC,SAASC,eAAe,SAIjDzC,QAAQC,IAAIH,aAAaC,YAEzBD,aAAa4C,kBAAkB,SAASC,GACpC3C,QAAQC,IAAI,kCAAmC0C,KDY5C,SAAkB/B,GACvB,GAAI,kBAAmBC,UAAW,CAGhC,GADkB,IAAI+B,IAAIzD,EAAYG,OAAOC,SAASP,MACxC6D,SAAWvD,OAAOC,SAASsD,OAIvC,OAGFvD,OAAOyB,iBAAiB,OAAQ,WAC9B,IAAMJ,EAAK,GAAAmC,OAAM3D,EAAN,sBAEPC,GAmHV,SAAiCuB,EAAOC,GAEtCmC,MAAMpC,GACHc,KAAK,SAAAuB,GACFhD,QAAQC,IAAI,eAGd,IAAMgD,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASL,QACO,MAAfM,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CvC,UAAUC,cAAcuC,MAAM5B,KAAK,SAAA5B,GACjCA,EAAayD,aAAa7B,KAAK,WAC7BnC,OAAOC,SAAS4B,aAKpBT,EAAgBC,EAAOC,KAG1BuB,MAAM,WACLnC,QAAQC,IACN,mEA1IAsD,CAAwB5C,EAAOC,GAI/BC,UAAUC,cAAcuC,MAAM5B,KAAK,WACjCzB,QAAQC,IACN,gHAMJS,EAAgBC,EAAOC,MCvB/BE","file":"static/js/main.de436d46.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst PUBLIC_URL = 'https://lathou.github.io/pwa/build';\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\n\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nconst imgPath = \"../src/logo.svg\";\n\nfunction displayNotification(message, registration) {\n  if (Notification.permission == 'granted') {\n    console.log('Notification should be shown now');\n    registration.showNotification('Une nouvelle notif', {\n        \"body\": message,\n        \"icon\": imgPath,\n        \"vibrate\": [200, 100, 200, 100, 200, 100, 400],\n        \"tag\": \"request\",\n        \"actions\": [\n          { \"action\": \"yes\", \"title\": \"Yes\", \"icon\": imgPath },\n          { \"action\": \"no\", \"title\": \"No\", \"icon\": imgPath }\n        ]\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.addEventListener(\"message\", event => {\n    // On vérifie si c'est un signal\n    // d'activation\n    if (event.data === \"skipWaiting\") {\n      console.log('skipWaiting')\n      // Et si c'est le cas, on force\n      // l'activation\n      navigator.serviceWorker.skipWaiting();\n      window.location.reload();\n    }\n  });\n\n  navigator.serviceWorker.addEventListener('notificationclick', function(e) {\n    var notification = e.notification;\n    var primaryKey = notification.data.primaryKey;\n    var action = e.action;\n    console.log(action)\n\n    if (action === 'close') {\n      notification.close();\n    } else {\n      notification.close();\n    }\n  });\n\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n\n      setTimeout(() => {\n        displayNotification('hello', registration);\n      }, 5000);\n\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              displayNotification('Une mise à jour a été trouvée, voulez-vous mettre à jour l\\'application ?', registration);\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n        console.log('has fetched');\n\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\nconsole.log(Notification.permission);\n\nNotification.requestPermission(function(status) {\n    console.log('Notification permission status:', status);\n});\n\n\n\nfunction updateSW(){\n\tnavigator.serviceWorker\n\t\t.getRegistration()\n\t\t.then(registration => {\n\t\t\tregistration.waiting\n\t\t\t  .postMessage(\"skipWaiting\");\n\t});\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}