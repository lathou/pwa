{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","setCookie","console","log","document","cookie","Date","App","react_default","a","createElement","className","src","logo","alt","href","target","rel","onClick","PUBLIC_URL","isLocalhost","Boolean","window","location","hostname","match","Notification","requestPermission","status","imgPath","registerValidSW","swUrl","config","navigator","serviceWorker","addEventListener","e","notification","action","data","primaryKey","close","register","then","registration","setTimeout","message","permission","showNotification","body","icon","vibrate","tag","actions","title","displayNotification","onupdatefound","installingWorker","installing","onstatechange","state","controller","confirm","waiting","postMessage","type","reload","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","getElementById","URL","origin","concat","fetch","response","contentType","headers","get","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3dfee016.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst setCookie = () => {\n  console.log('setCookie');\n  document.cookie = \"SESSID=\" + new Date() + \";expires=Fri, 31 Dec 9999 23:59:59 GMT; domain=.github.io; session=true\";\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>Welcome on our App!</p>\n        <a\n          className=\"App-link\"\n          href=\"https://lathou.github.io/portfolio/app/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Go to live-plateform\n        </a>\n        <br/><br/>\n        <a\n        className=\"App-link\"\n        onClick={setCookie}>\n          Set a cookie\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst PUBLIC_URL = 'https://lathou.github.io/pwa/build';\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\n\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nif(typeof Notification !== 'undefined'){\n  Notification.requestPermission(function(status) {\n      console.log('Notification permission status:', status);\n  });\n}\n\nconst imgPath = \"../src/logo.svg\";\n\nfunction displayNotification(message, registration) {\n  if (typeof Notification !== 'undefined' && Notification.permission == 'granted') {\n    console.log('Notification should be shown now');\n    registration.showNotification('Une nouvelle notif', {\n        \"body\": message,\n        \"icon\": imgPath,\n        \"vibrate\": [200, 100, 200, 100, 200, 100, 400],\n        \"tag\": \"request\",\n        \"actions\": [\n          { \"action\": \"yes\", \"title\": \"Yes\", \"icon\": imgPath },\n          { \"action\": \"no\", \"title\": \"No\", \"icon\": imgPath }\n        ]\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n\n  navigator.serviceWorker.addEventListener('notificationclick', function(e) {\n    var notification = e.notification;\n    var primaryKey = notification.data.primaryKey;\n    var action = e.action;\n    console.log(action)\n\n    if (action === 'close') {\n      notification.close();\n    } else {\n      notification.close();\n    }\n  });\n\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n\n      setTimeout(() => {\n        displayNotification('hello', registration);\n      }, 5000);\n\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              if(window.confirm('Une mise à jour a été trouvée, voulez-vous mettre à jour l\\'application ?')) {\n                console.log('post SKIP_WAITING');\n                registration.waiting.postMessage({type: \"SKIP_WAITING\"});\n                window.location.reload();\n              }\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n        console.log('has fetched');\n\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}