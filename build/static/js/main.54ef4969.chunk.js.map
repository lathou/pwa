{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","react_default","a","createElement","className","src","logo","alt","href","target","rel","PUBLIC_URL","isLocalhost","Boolean","window","location","hostname","match","imgPath","registerValidSW","swUrl","config","navigator","serviceWorker","addEventListener","event","data","skipWaiting","reload","e","notification","action","primaryKey","console","log","close","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","message","state","controller","Notification","permission","getRegistration","reg","showNotification","body","icon","vibrate","tag","actions","title","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","requestPermission","status","URL","origin","concat","fetch","response","contentType","headers","get","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.54ef4969.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst PUBLIC_URL = 'https://lathou.github.io/pwa/build';\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if ('serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nconst imgPath = \"../src/logo.svg\";\r\n\r\nfunction displayNotification(message) {\r\n  if (Notification.permission == 'granted') {\r\n    console.log('Notification should be shown now');\r\n    navigator.serviceWorker.getRegistration().then(function(reg) {\r\n      reg.showNotification('Une nouvelle notif', {\r\n          \"body\": message,\r\n          \"icon\": imgPath,\r\n          \"vibrate\": [200, 100, 200, 100, 200, 100, 400],\r\n          \"tag\": \"request\",\r\n          \"actions\": [\r\n            { \"action\": \"yes\", \"title\": \"Yes\", \"icon\": imgPath },\r\n            { \"action\": \"no\", \"title\": \"No\", \"icon\": imgPath }\r\n          ]\r\n        });\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker.addEventListener(\"message\", event => {\r\n    // On vérifie si c'est un signal\r\n    // d'activation\r\n    if (event.data === \"skipWaiting\") {\r\n      // Et si c'est le cas, on force\r\n      // l'activation\r\n      navigator.serviceWorker.skipWaiting();\r\n      window.location.reload();\r\n    }\r\n  });\r\n\r\n  navigator.serviceWorker.addEventListener('notificationclick', function(e) {\r\n    var notification = e.notification;\r\n    var primaryKey = notification.data.primaryKey;\r\n    var action = e.action;\r\n    console.log(action)\r\n\r\n    if (action === 'close') {\r\n      notification.close();\r\n    } else {\r\n      notification.close();\r\n    }\r\n  });\r\n\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              displayNotification('Une mise à jour a été trouvée, voulez-vous mettre à jour l\\'application ?');\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n        console.log('has fetched');\r\n\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n\r\n\r\nconsole.log(Notification.permission);\r\n\r\nNotification.requestPermission(function(status) {\r\n    console.log('Notification permission status:', status);\r\n});\r\n\r\n\r\n\r\nfunction updateSW(){\r\n\tnavigator.serviceWorker\r\n\t\t.getRegistration()\r\n\t\t.then(registration => {\r\n\t\t\tregistration.waiting\r\n\t\t\t  .postMessage(\"skipWaiting\");\r\n\t});\r\n}\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();"],"sourceRoot":""}